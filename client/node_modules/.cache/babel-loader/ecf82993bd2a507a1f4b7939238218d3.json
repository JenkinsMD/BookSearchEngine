{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\MDJen\\\\Documents\\\\BootcampActivities\\\\BookSearchEngine\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React from'react';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import{BrowserRouter as Router,Switch,Route}from'react-router-dom';import SearchBooks from'./pages/SearchBooks';import SavedBooks from'./pages/SavedBooks';import Navbar from'./components/Navbar';// Construct our main GraphQL API endpoint\nvar httpLink=createHttpLink({uri:'/graphql'});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem('id_token');// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/React.createElement(ApolloProvider,{client:client},/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Navbar,null),/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/\",component:SearchBooks}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/saved\",component:SavedBooks}),/*#__PURE__*/React.createElement(Route,{render:function render(){return/*#__PURE__*/React.createElement(\"h1\",{className:\"display-2\"},\"Wrong page!\");}})))));}export default App;","map":{"version":3,"sources":["C:/Users/MDJen/Documents/BootcampActivities/BookSearchEngine/client/src/App.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","BrowserRouter","Router","Switch","Route","SearchBooks","SavedBooks","Navbar","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App"],"mappings":"oMAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,YADF,CAEEC,aAFF,CAGEC,cAHF,CAIEC,cAJF,KAKO,gBALP,CAMA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,aAAa,GAAIC,CAAAA,MAA1B,CAAkCC,MAAlC,CAA0CC,KAA1C,KAAuD,kBAAvD,CACA,MAAOC,CAAAA,WAAP,KAAwB,qBAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,oBAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CAEA;AACA,GAAMC,CAAAA,QAAQ,CAAGT,cAAc,CAAC,CAC9BU,GAAG,CAAE,UADyB,CAAD,CAA/B,CAIA;AACA,GAAMC,CAAAA,QAAQ,CAAGV,UAAU,CAAC,SAACW,CAAD,MAAoB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CAC9C;AACA,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd,CACA;AACA,MAAO,CACLH,OAAO,gCACFA,OADE,MAELI,aAAa,CAAEH,KAAK,kBAAaA,KAAb,EAAuB,EAFtC,EADF,CAAP,CAMD,CAV0B,CAA3B,CAYA,GAAMI,CAAAA,MAAM,CAAG,GAAIrB,CAAAA,YAAJ,CAAiB,CAC9B;AACAsB,IAAI,CAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CAFwB,CAG9BY,KAAK,CAAE,GAAIvB,CAAAA,aAAJ,EAHuB,CAAjB,CAAf,CAMA,QAASwB,CAAAA,GAAT,EAAe,CACb,mBACE,oBAAC,cAAD,EAAgB,MAAM,CAAEJ,MAAxB,eACE,oBAAC,MAAD,mBACE,qDACE,oBAAC,MAAD,MADF,cAEE,oBAAC,MAAD,mBACE,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,SAAS,CAAEZ,WAAjC,EADF,cAEE,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,QAAlB,CAA2B,SAAS,CAAEC,UAAtC,EAFF,cAGE,oBAAC,KAAD,EAAO,MAAM,CAAE,qCAAM,0BAAI,SAAS,CAAC,WAAd,gBAAN,EAAf,EAHF,CAFF,CADF,CADF,CADF,CAcD,CAED,cAAee,CAAAA,GAAf","sourcesContent":["import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}> \n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}