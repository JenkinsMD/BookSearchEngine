{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MDJen\\\\Documents\\\\BootcampActivities\\\\BookSearchEngine\\\\client\\\\src\\\\pages\\\\SavedBooks.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap'; // import { getMe, deleteBook } from '../utils/API';\n\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { SAVE_BOOK, REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  //MJ ADDED\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_ME);\n  const [removeBook, {\n    error\n  }] = useMutation(REMOVE_BOOK);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || {};\n  console.log(\"$$$$\"); // use this to determine if `useEffect()` hook needs to run again\n\n  const userDataLength = Object.keys(userData).length;\n  console.log(\"****userDataLength\", userDataLength); // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n  //       if (!token) {\n  //         return false;\n  //       }\n  //       const response = await getMe(token);\n  //       if (!response.ok) {\n  //         throw new Error('something went wrong!');\n  //       }\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n  //   getUserData();\n  // }, [userDataLength]);\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await removeBook({\n        variables: {\n          bookId\n        }\n      }); // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n      // const updatedUser = await response.json();\n      // setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (!userDataLength) {\n    // if (loading) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 12\n      }\n    }, \"LOADING...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"Viewing saved books!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.map(book => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: book.bookId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, book.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: book.image,\n      alt: `The cover for ${book.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 31\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }, \"Authors: \", book.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, book.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteBook(book.bookId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, \"Delete this Book!\")));\n  }))));\n};\n\nexport default SavedBooks;","map":{"version":3,"sources":["C:/Users/MDJen/Documents/BootcampActivities/BookSearchEngine/client/src/pages/SavedBooks.js"],"names":["React","useState","useEffect","Jumbotron","Container","CardColumns","Card","Button","Auth","removeBookId","useMutation","useQuery","QUERY_ME","SAVE_BOOK","REMOVE_BOOK","SavedBooks","loading","data","removeBook","error","userData","me","console","log","userDataLength","Object","keys","length","handleDeleteBook","bookId","token","loggedIn","getToken","variables","err","savedBooks","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { SAVE_BOOK, REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n\n  //MJ ADDED\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n  console.log(\"$$$$\")\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n  console.log(\"****userDataLength\", userDataLength)\n\n  // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //       if (!token) {\n  //         return false;\n  //       }\n\n  //       const response = await getMe(token);\n\n  //       if (!response.ok) {\n  //         throw new Error('something went wrong!');\n  //       }\n\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n\n  //   getUserData();\n  // }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {data} = await removeBook({\n        variables: {bookId}\n      });\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const updatedUser = await response.json();\n      // setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    // if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}